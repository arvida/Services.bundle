BASE_URL = 'http://www.svtplay.se'

####################################################################################################
def NormalizeURL(url):

	if not '/video/' in url:
		try:
			url = HTML.ElementFromURL(url).xpath('//meta[@property="og:url"]/@content')[0]
		except:
			pass

	return url

####################################################################################################
def MetadataObjectForURL(url):

	try:
		page = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	# Test if this page contains video
	json_url = page.xpath('//a[@id="player"]/@data-json-href')
	if len(json_url) < 1:
		return None

	show = page.xpath('//meta[@property="og:title"]/@content')[0].split(' - ')[0]
	title = page.xpath('//meta[@property="og:title"]/@content')[0].split(' - ')[1].split(' | ')[0]
	summary = page.xpath('//meta[@property="og:description"]/@content')[0]
	thumb = page.xpath('//meta[@property="og:image"]/@content')[0].replace('/small/', '/large/')

	try:
		air_date = page.xpath('//div[@class="playVideoInfo"]//time/@datetime')[0].split('T')[0]
		air_date = Datetime.ParseDate(air_date).date()
	except:
		air_date = None

	try:
		duration = page.xpath('//div[@class="playVideoInfo"]//span/strong[contains(text(), "ngd:")]/following-sibling::text()')[0].strip().split(' ')[0]
		duration = int(duration) * 60 * 1000 #millisecs
	except:
		duration = None

	return EpisodeObject(
		show = show,
		title = title,
		summary = summary,
		duration = duration,
		thumb = thumb,
		originally_available_at = air_date
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [ PartObject(key=Callback(PlayVideo, url=url)) ],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = '1024',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, bitrate=None):

	try:
		page = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	video_url = None
	json_url = page.xpath('//a[@id="player"]/@data-json-href')
	if len(json_url) < 1:
		raise Ex.MediaNotAvailable

	json_url = '%s%s?output=json' % (BASE_URL, json_url[0])
	json_obj = JSON.ObjectFromURL(json_url)

	for video in json_obj['video']['videoReferences']:
		if video['playerType'] == 'ios':
			video_url = video['url']
			break

	if not video_url:
		raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url=video_url))
